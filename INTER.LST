     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    mov ax,data
     4 00000003 8ED8                        mov ds,ax
     5 00000005 B8[0000]                    mov ax,stack
     6 00000008 8ED0                        mov ss,ax
     7 0000000A BC[0001]                    mov sp,stacktop
     8                                  
     9                                  ; Obs: [int9*4] = IP  ; [int9*4+2] = CS
    10                                  ; https://en.wikibooks.org/wiki/X86_Assembly/Advanced_Interrupts#The_Interrupt_Vector_Table
    11                                  
    12 0000000D 31C0                            xor     ax, ax  ; zera o AX
    13 0000000F 8EC0                            mov     es, ax  ; Faz o ES [Extra Segment Register] apontar para 0h, que é o espaço reservado para vetores de interrupção
    14                                  ; Salvando o segmento antigo
    15 00000011 26A12400                        mov     ax, [es:int9*4] ; AX recebe o endereço antigo da próxima instrução [IP - Instruction Pointer] (que INT 9h estava apontando)
    16 00000015 A3[0200]                        mov     [offset_dos], ax  ; Esse endereço é guardado em offset_dos
    17 00000018 26A12600                        mov     ax, [es:int9*4+2] ; AX recebe o endereço antigo de CS (que estava sendo apontado por INT 9h)
    18 0000001C A3[0000]                        mov     [cs_dos], ax  ; Esse endereço é guardado em cs_dos
    19 0000001F FA                              cli     ; Clear Interruption Flag - faz o processador ignorar as interrupções mascaradas
    20                                  ; Substituindo a tabela da BIOS pela nossa tabela
    21 00000020 268C0E2600                      mov     [es:int9*4+2], cs ; Guarda o CS como nova próxima instrução depois da interrupção
    22 00000025 26C7062400[2401]                mov     WORD [es:int9*4],keyint ; Salva a nova sequência de tratamento de interrupção
    23 0000002C FB                              sti     ; Set Interruption Flag - ativa as interrupções
    24                                  
    25                                  L1:
    26 0000002D A1[0D00]                        mov     ax,[p_i]  ; pont p/ int quando pressiona a tecla
    27 00000030 3B06[0F00]                      cmp     ax,[p_t]  ; verifica se soltou a tecla
    28 00000034 74F7                            je      L1  ; se soltou, permanece no loop
    29 00000036 FF06[0F00]                      inc     word[p_t] ; se a tecla estiver pressionada, incrementa
    30 0000003A 8126[0F00]0700                  and     word[p_t],7 ; pega os três últimos bits de [p_t]
    31 00000040 8B1E[0F00]                      mov     bx,[p_t]
    32 00000044 31C0                            xor     ax, ax  ; zera AX
    33 00000046 8A87[0500]                      mov     al, [bx+tecla]  ;
    34 0000004A A2[0400]                        mov     [tecla_u],al ; Recebe o código da tecla (depois de solta)
    35                                  
    36 0000004D 803E[0400]A2                    cmp     byte [tecla_u], 0A2H ; Codigo da letra G
    37 00000052 7444                            je      emergencia_off ; Desliga a emergencia
    38 00000054 803E[1600]02                    cmp     byte [status], 2
    39 00000059 74D2                            je      L1  ; Se estiver em estado de emergencia, fica no loop ate voltar ao normal (apertar a tecla G)
    40 0000005B 803E[0400]81                    cmp     byte [tecla_u], 81h ; 81h é o código gerado ao soltar a tecla ESC
    41 00000060 742D                            je      emergencia_on  ; Liga a emergencia
    42 00000062 803E[0400]B9                    cmp     byte [tecla_u], 0B9h ; Codigo da barra de espaco
    43 00000067 743D                            je      interrompe_elevador ; Para calibracao
    44 00000069 803E[0400]82                    cmp     byte [tecla_u], 82h; Codigo do 1
    45 0000006E 744B                            je      binter_1  ; Botao interno 1
    46 00000070 803E[0400]83                    cmp     byte [tecla_u], 83h; Codigo do 2
    47 00000075 7459                            je      binter_2  ; Botao interno 2
    48 00000077 803E[0400]84                    cmp     byte [tecla_u], 84h; Codigo do 3
    49 0000007C 745B                            je      binter_3  ; Botao interno 3
    50 0000007E 803E[0400]85                    cmp     byte [tecla_u], 85h; Codigo do 4
    51 00000083 745D                            je      binter_4  ; Botao interno 4
    52 00000085 803E[0400]90                    cmp     byte [tecla_u], 90h;  Codigo da letra Q
    53 0000008A 747B                            je      sair
    54 0000008C E99EFF                          jmp     L1
    55                                  
    56                                  emergencia_on:
    57 0000008F BA[2F00]                        mov  dx, int_esc
    58 00000092 E85600                          call imprime
    59                                          ; mov byte [status], 0003h
    60                                          ; mov dx, [status]  ; conferir o resultado
    61                                          ; call imprime_byte
    62 00000095 E995FF                          jmp L1
    63                                  
    64                                  emergencia_off:
    65 00000098 BA[4800]                        mov dx, int_g
    66 0000009B E84D00                          call imprime
    67 0000009E C606[1600]01                    mov byte [status], 01h ; 'subindo' < alterar depois
    68 000000A3 E987FF                          jmp L1
    69                                  
    70                                  interrompe_elevador:
    71 000000A6 BA[6300]                        mov dx, int_barra
    72 000000A9 E83F00                          call imprime
    73 000000AC C606[1600]00                    mov byte [status], 00h ; parado
    74 000000B1 8B16[1600]                      mov dx, [status]
    75 000000B5 E83800                          call imprime_byte
    76 000000B8 E972FF                          jmp L1
    77                                  
    78                                  binter_1:
    79 000000BB BA[8100]                        mov dx, int_binter1
    80 000000BE E82A00                          call imprime
    81 000000C1 8006[CA00]01                    add byte [botoes_internos], 01h
    82 000000C6 8B16[CA00]                      mov dx, [botoes_internos]
    83 000000CA E82300                          call imprime_byte
    84 000000CD E95DFF                          jmp L1
    85                                  
    86                                  binter_2:
    87 000000D0 BA[9300]                        mov dx, int_binter2
    88 000000D3 E81500                          call imprime
    89 000000D6 E954FF                          jmp L1
    90                                  binter_3:
    91 000000D9 BA[A500]                        mov dx, int_binter3
    92 000000DC E80C00                          call imprime
    93 000000DF E94BFF                          jmp L1
    94                                  binter_4:
    95 000000E2 BA[B700]                        mov dx, int_binter4
    96 000000E5 E80300                          call imprime
    97 000000E8 E942FF                          jmp L1
    98                                  
    99                                  imprime:
   100 000000EB B409                            mov     ah, 9 ; coloca a função de imprimir DX no INT 21h
   101 000000ED CD21                            int     21h ; imprime o conteúdo de DX (teclasc)
   102 000000EF C3                              ret
   103                                  
   104                                  imprime_byte:
   105 000000F0 80C230                          add dl, '0' ; Transforma o byte em caractere
   106 000000F3 B402                            mov ah, 2
   107 000000F5 CD21                            int 21h
   108 000000F7 88F2                            mov dl, dh
   109 000000F9 80C230                          add dl, '0'
   110 000000FC CD21                            int 21h
   111 000000FE B20D                            mov dl, 13
   112 00000100 CD21                            int 21h
   113 00000102 B20A                            mov dl, 10
   114 00000104 CD21                            int 21h
   115 00000106 C3                              ret
   116                                  
   117                                  sair: ; Restaura a tabela de interrupção da BIOS
   118 00000107 BA[1700]                        mov     dx, int_o
   119 0000010A E8DEFF                          call imprime
   120 0000010D FA                              cli
   121 0000010E 31C0                            xor     ax, ax
   122 00000110 8EC0                            mov     es, ax
   123 00000112 A1[0000]                        mov     ax, [cs_dos]
   124 00000115 26A32600                        mov     [es:int9*4+2], ax
   125 00000119 A1[0200]                        mov     ax, [offset_dos]
   126 0000011C 26A32400                        mov     [es:int9*4], ax
   127 00000120 B44C                            mov     ah, 4Ch ; Retorna o controle para o sistema (finaliza o programa)
   128 00000122 CD21                            int     21h
   129                                  
   130                                  
   131                                  keyint:
   132                                  ; Guarda os valores antigos
   133 00000124 50                              push    ax
   134 00000125 53                              push    bx
   135 00000126 1E                              push    ds
   136                                  ; Define os novos
   137 00000127 B8[0000]                        mov     ax,data ; segment data
   138 0000012A 8ED8                            mov     ds,ax
   139 0000012C E460                            in      al, kb_data ; Lê do teclado
   140 0000012E FF06[0D00]                      inc     word [p_i]  ; incrementa quando pressiona a tecla
   141 00000132 8126[0D00]0700                  and     word [p_i],7
   142 00000138 8B1E[0D00]                      mov     bx,[p_i] ; Coloca os três primeiros bits de [p_i] em BX
   143 0000013C 8887[0500]                      mov     [bx+tecla],al ; Guarda o código da tecla pressionada
   144 00000140 E461                            in      al, kb_ctl
   145 00000142 0C80                            or      al, 80h ; Pega os 4 últimos bits de AL
   146 00000144 E661                            out     kb_ctl, al
   147 00000146 247F                            and     al, 7Fh ; Pega os 7 primeiros bits de AL
   148 00000148 E661                            out     kb_ctl, al
   149 0000014A B020                            mov     al, eoi
   150 0000014C E620                            out     pictrl, al
   151                                  ; Restaura os valores anteriores
   152 0000014E 1F                              pop     ds
   153 0000014F 5B                              pop     bx
   154 00000150 58                              pop     ax
   155 00000151 CF                              iret
   156                                  
   157                                  segment data
   158                                          kb_data equ 60h  ;PORTA DE LEITURA DE TECLADO - pega o código da tecla
   159                                          kb_ctl  equ 61h  ;PORTA DE RESET PARA PEDIR NOVA INTERRUPCAO
   160                                          pictrl  equ 20h  ; finaliza operação do sistema
   161                                          eoi     equ 20h   ; finaliza operação do sistema
   162                                          int9    equ 9h  ; 09h é interrupção de teclado
   163 00000000 0100                            cs_dos  dw  1
   164 00000002 0100                            offset_dos  dw 1
   165 00000004 00                              tecla_u db 0
   166 00000005 <res 00000008>                  tecla   resb  8
   167 0000000D 0000                            p_i     dw  0   ;ponteiro p/ interrupcao (qnd pressiona tecla)
   168 0000000F 0000                            p_t     dw  0   ;ponterio p/ interrupcao ( qnd solta tecla)
   169 00000011 00000D0A24                      teclasc db  0,0,13,10,'$'
   170 00000016 00                              status  db  0 ; 0: parado; 1: descendo; 2: subindo; 3: emergencia ativado
   171 00000017 513A207361696E646F-             int_o   db  'Q: saindo do programa', 13, 10, '$'
   172 00000020 20646F2070726F6772-
   173 00000029 616D610D0A24       
   174 0000002F 4553433A20656D6572-             int_esc    db  'ESC: emergencia ligado', 13, 10, '$'
   175 00000038 67656E636961206C69-
   176 00000041 6761646F0D0A24     
   177 00000048 473A20656D65726765-             int_g    db  'G: emergencia desativado', 13, 10, '$'
   178 00000051 6E6369612064657361-
   179 0000005A 74697661646F0D0A24 
   180 00000063 424152524120444520-             int_barra  db  'BARRA DE ESPACO: calibracao', 13, 10, '$'
   181 0000006C 45535041434F3A2063-
   182 00000075 616C6962726163616F-
   183 0000007E 0D0A24             
   184 00000081 426F74616F20696E74-             int_binter1  db  'Botao interno 1', 13, 10, '$'
   185 0000008A 65726E6F20310D0A24 
   186 00000093 426F74616F20696E74-             int_binter2  db  'Botao interno 2', 13, 10, '$'
   187 0000009C 65726E6F20320D0A24 
   188 000000A5 426F74616F20696E74-             int_binter3  db  'Botao interno 3', 13, 10, '$'
   189 000000AE 65726E6F20330D0A24 
   190 000000B7 426F74616F20696E74-             int_binter4  db  'Botao interno 4', 13, 10, '$'
   191 000000C0 65726E6F20340D0A24 
   192 000000C9 00                              botoes_externos  db  00h ; 0001: B1 | 0010: B2 | 0100: B3 | 0100: B4 | 0001 0000: B5 | 0010 0000: B6
   193 000000CA 00                              botoes_internos  db  00h ; 0001: I1 | 0010: I2 | 0100: I3 | 0100: I4
   194                                  
   195                                  segment stack stack
   196 00000000 <res 00000100>              resb 256
   197                                  stacktop:
